
SPI_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ce  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a2  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005eb  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  48:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  4c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  54:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  58:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  5c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  60:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  68:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  6c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  70:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  74:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  78:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  7c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  80:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  84:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  88:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  8c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  90:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  94:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  98:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  9c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  a0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  a4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  a8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  ac:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  b0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  b4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  b8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  bc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  c0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  c4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  c8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  cc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  d0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  d4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  d8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  dc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  e0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  e4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  e8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  ec:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  f0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  f4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  f8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  fc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 100:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 104:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 108:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 10c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 110:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 114:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 118:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 11c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 120:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 124:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 128:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 12c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 130:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 134:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 138:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 13c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 140:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 144:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 148:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 14c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 150:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 154:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 158:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 15c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 160:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 164:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 168:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 16c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 170:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 174:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 178:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 17c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 180:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 184:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 188:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 18c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 190:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 194:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 198:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 19c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1a0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1a4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1a8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1ac:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1b0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1b4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1b8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1bc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1c0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1c4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1c8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1cc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1d0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1d4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1d8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1dc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1e0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1e4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1e8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1ec:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1f0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1f4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
 1f8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 ea       	ldi	r30, 0xA6	; 166
 214:	f2 e0       	ldi	r31, 0x02	; 2
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	0e 94 19 01 	call	0x232	; 0x232 <main>
 22a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000022e <__bad_interrupt>:
 22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000232 <main>:
//TWI_t twi;
void DS2321_init(void);
uint8_t internal_adress = 0x0e;
int main(void)
{
	 PORTD.DIR    =    PIN0_bm ;	// wyjœcia i2C
 232:	c1 e0       	ldi	r28, 0x01	; 1
 234:	c0 93 60 06 	sts	0x0660, r28
	 //PORTC.DIRCLR    =    PIN0_bm|PIN1_bm ;       // wejœcie i2C
	 //PORTC.OUTCLR    =    PIN0_bm | PIN1_bm;
	 PORTCFG.MPCMASK = 0x03;                                     // Configure several PINxCTRL registers.
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	80 93 b0 00 	sts	0x00B0, r24
	 PORTC.PIN0CTRL = (PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;
 23e:	e0 e4       	ldi	r30, 0x40	; 64
 240:	f6 e0       	ldi	r31, 0x06	; 6
 242:	80 89       	ldd	r24, Z+16	; 0x10
 244:	87 7c       	andi	r24, 0xC7	; 199
 246:	88 61       	ori	r24, 0x18	; 24
 248:	80 8b       	std	Z+16, r24	; 0x10
    /* TWI */
	//PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm; //0x07
	//sei();
	init_osc32();
 24a:	0e 94 3e 01 	call	0x27c	; 0x27c <init_osc32>
			static inline void TWI_Init(TWI_t* const TWI,
			                            const uint8_t Baud) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void TWI_Init(TWI_t* const TWI,
			                            const uint8_t Baud)
			{
				TWI->CTRL          = 0x00;
 24e:	e0 e8       	ldi	r30, 0x80	; 128
 250:	f4 e0       	ldi	r31, 0x04	; 4
 252:	10 82       	st	Z, r1
				TWI->MASTER.BAUD   = Baud;
 254:	8b e9       	ldi	r24, 0x9B	; 155
 256:	85 83       	std	Z+5, r24	; 0x05
				TWI->MASTER.CTRLA  = TWI_MASTER_ENABLE_bm;
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	81 83       	std	Z+1, r24	; 0x01
				TWI->MASTER.CTRLB  = 0;
 25c:	12 82       	std	Z+2, r1	; 0x02
				TWI->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
 25e:	c4 83       	std	Z+4, r28	; 0x04
	
	TWI_Init(&TWIC,TWI_BAUD_FROM_FREQ(100000));
	DS2321_init;
    while (1) 
    {
	   PORTD_OUTTGL = PIN0_bm;
 260:	e7 e6       	ldi	r30, 0x67	; 103
 262:	f6 e0       	ldi	r31, 0x06	; 6
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	37 ea       	ldi	r19, 0xA7	; 167
 26c:	91 e6       	ldi	r25, 0x61	; 97
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	30 40       	sbci	r19, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x3c>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x46>
 278:	00 00       	nop
 27a:	f5 cf       	rjmp	.-22     	; 0x266 <main+0x34>

0000027c <init_osc32>:
#include "Oscylator_init.h"

void init_osc32(void)
{
	
	OSC.CTRL     =    OSC_RC32MEN_bm;       // w³¹czenie oscylatora 32MHz
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // czekanie na ustabilizowanie siê generatora
 282:	e0 e5       	ldi	r30, 0x50	; 80
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	81 81       	ldd	r24, Z+1	; 0x01
 288:	81 ff       	sbrs	r24, 1
 28a:	fd cf       	rjmp	.-6      	; 0x286 <init_osc32+0xa>
	CPU_CCP      =    CCP_IOREG_gc;         // odblokowanie zmiany Ÿród³a sygna³u
 28c:	88 ed       	ldi	r24, 0xD8	; 216
 28e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL     =    CLK_SCLKSEL_RC32M_gc; // zmiana Ÿród³a sygna³u na RC 32MHz
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 40 00 	sts	0x0040, r24
	PORTC_REMAP |= 0x16; //See page 152 in datasheet, remaps the USART0
 296:	ee e4       	ldi	r30, 0x4E	; 78
 298:	f6 e0       	ldi	r31, 0x06	; 6
 29a:	80 81       	ld	r24, Z
 29c:	86 61       	ori	r24, 0x16	; 22
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
